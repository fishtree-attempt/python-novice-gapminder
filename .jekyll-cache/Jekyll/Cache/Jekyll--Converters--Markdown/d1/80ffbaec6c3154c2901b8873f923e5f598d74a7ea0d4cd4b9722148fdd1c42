I"<z<h2 id="a-list-stores-many-values-in-a-single-structure">A list stores many values in a single structure.</h2>

<ul>
  <li>Doing calculations with a hundred variables called <code class="highlighter-rouge">pressure_001</code>, <code class="highlighter-rouge">pressure_002</code>, etc.,
would be at least as slow as doing them by hand.</li>
  <li>Use a <em>list</em> to store many values together.
    <ul>
      <li>Contained within square brackets <code class="highlighter-rouge">[...]</code>.</li>
      <li>Values separated by commas <code class="highlighter-rouge">,</code>.</li>
    </ul>
  </li>
  <li>Use <code class="highlighter-rouge">len</code> to find out how many values are in a list.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pressures</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.273</span><span class="p">,</span> <span class="mf">0.275</span><span class="p">,</span> <span class="mf">0.277</span><span class="p">,</span> <span class="mf">0.275</span><span class="p">,</span> <span class="mf">0.276</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'pressures:'</span><span class="p">,</span> <span class="n">pressures</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'length:'</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">pressures</span><span class="p">))</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pressures: [0.273, 0.275, 0.277, 0.275, 0.276]
length: 5
</code></pre></div></div>

<h2 id="use-an-items-index-to-fetch-it-from-a-list">Use an item’s index to fetch it from a list.</h2>

<ul>
  <li>Just like strings.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'zeroth item of pressures:'</span><span class="p">,</span> <span class="n">pressures</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">'fourth item of pressures:'</span><span class="p">,</span> <span class="n">pressures</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zeroth item of pressures: 0.273
fourth item of pressures: 0.276
</code></pre></div></div>

<h2 id="lists-values-can-be-replaced-by-assigning-to-them">Lists’ values can be replaced by assigning to them.</h2>

<ul>
  <li>Use an index expression on the left of assignment to replace a value.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pressures</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.265</span>
<span class="k">print</span><span class="p">(</span><span class="s">'pressures is now:'</span><span class="p">,</span> <span class="n">pressures</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pressures is now: [0.265, 0.275, 0.277, 0.275, 0.276]
</code></pre></div></div>

<h2 id="appending-items-to-a-list-lengthens-it">Appending items to a list lengthens it.</h2>

<ul>
  <li>Use <code class="highlighter-rouge">list_name.append</code> to add items to the end of a list.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'primes is initially:'</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>
<span class="n">primes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="n">primes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'primes has become:'</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>primes is initially: [2, 3, 5]
primes has become: [2, 3, 5, 7, 9]
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">append</code> is a <em>method</em> of lists.
    <ul>
      <li>Like a function, but tied to a particular object.</li>
    </ul>
  </li>
  <li>Use <code class="highlighter-rouge">object_name.method_name</code> to call methods.
    <ul>
      <li>Deliberately resembles the way we refer to things in a library.</li>
    </ul>
  </li>
  <li>We will meet other methods of lists as we go along.
    <ul>
      <li>Use <code class="highlighter-rouge">help(list)</code> for a preview.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">extend</code> is similar to <code class="highlighter-rouge">append</code>, but it allows you to combine two lists.  For example:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">teen_primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">]</span>
<span class="n">middle_aged_primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">37</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">47</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'primes is currently:'</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>
<span class="n">primes</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">teen_primes</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'primes has now become:'</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>
<span class="n">primes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">middle_aged_primes</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'primes has finally become:'</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>primes is currently: [2, 3, 5, 7, 9]
primes has now become: [2, 3, 5, 7, 9, 11, 13, 17, 19]
primes has finally become: [2, 3, 5, 7, 9, 11, 13, 17, 19, [37, 41, 43, 47]]
</code></pre></div></div>

<p>Note that while <code class="highlighter-rouge">extend</code> maintains the “flat” structure of the list, appending a list to a list makes the result
two-dimensional - the last element in <code class="highlighter-rouge">primes</code> is a list, not an integer.</p>

<h2 id="use-del-to-remove-items-from-a-list-entirely">Use <code class="highlighter-rouge">del</code> to remove items from a list entirely.</h2>

<ul>
  <li><code class="highlighter-rouge">del list_name[index]</code> removes an item from a list and shortens the list.</li>
  <li>Not a function or a method, but a statement in the language.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'primes before removing last item:'</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>
<span class="k">del</span> <span class="n">primes</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'primes after removing last item:'</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>primes before removing last item: [2, 3, 5, 7, 9]
primes after removing last item: [2, 3, 5, 7]
</code></pre></div></div>

<h2 id="the-empty-list-contains-no-values">The empty list contains no values.</h2>

<ul>
  <li>Use <code class="highlighter-rouge">[]</code> on its own to represent a list that doesn’t contain any values.
    <ul>
      <li>“The zero of lists.”</li>
    </ul>
  </li>
  <li>Helpful as a starting point for collecting values
    (which we will see in the <a href="/12-for-loops/index.html">next episode</a>.</li>
</ul>

<h2 id="lists-may-contain-values-of-different-types">Lists may contain values of different types.</h2>

<ul>
  <li>A single list may contain numbers, strings, and anything else.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">goals</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s">'Create lists.'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'Extract items from lists.'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'Modify lists.'</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="character-strings-can-be-indexed-like-lists">Character strings can be indexed like lists.</h2>

<ul>
  <li>Get single characters from a character string using indexes in square brackets.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">element</span> <span class="o">=</span> <span class="s">'carbon'</span>
<span class="k">print</span><span class="p">(</span><span class="s">'zeroth character:'</span><span class="p">,</span> <span class="n">element</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">'third character:'</span><span class="p">,</span> <span class="n">element</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zeroth character: c
third character: b
</code></pre></div></div>

<h2 id="character-strings-are-immutable">Character strings are immutable.</h2>

<ul>
  <li>Cannot change the characters in a string after it has been created.
    <ul>
      <li><em>Immutable</em>: can’t be changed after creation.</li>
      <li>In contrast, lists are <em>mutable</em>: they can be modified in place.</li>
    </ul>
  </li>
  <li>Python considers the string to be a single value with parts,
not a collection of values.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">element</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">'C'</span>
</code></pre></div></div>
<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TypeError: 'str' object does not support item assignment
</code></pre></div></div>

<ul>
  <li>Lists and character strings are both <em>collections</em>.</li>
</ul>

<h2 id="indexing-beyond-the-end-of-the-collection-is-an-error">Indexing beyond the end of the collection is an error.</h2>

<ul>
  <li>Python reports an <code class="highlighter-rouge">IndexError</code> if we attempt to access a value that doesn’t exist.
    <ul>
      <li>This is a kind of <a href="../04-built-in/#runtime-error">runtime error</a>.</li>
      <li>Cannot be detected as the code is parsed
because the index might be calculated based on data.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'99th element of element is:'</span><span class="p">,</span> <span class="n">element</span><span class="p">[</span><span class="mi">99</span><span class="p">])</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IndexError: string index out of range
</code></pre></div></div>

<blockquote class="challenge">
  <h2 id="fill-in-the-blanks">Fill in the Blanks</h2>

  <p>Fill in the blanks so that the program below produces the output shown.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">values</span> <span class="o">=</span> <span class="n">____</span>
<span class="n">values</span><span class="o">.</span><span class="n">____</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">values</span><span class="o">.</span><span class="n">____</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">values</span><span class="o">.</span><span class="n">____</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'first time:'</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
<span class="n">values</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="n">____</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'second time:'</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
</code></pre></div>  </div>

  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>first time: [1, 3, 5]
second time: [3, 5]
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">values</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">values</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">values</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">values</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'first time:'</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
<span class="n">values</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
<span class="k">print</span><span class="p">(</span><span class="s">'second time:'</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="how-large-is-a-slice">How Large is a Slice?</h2>

  <p>If ‘low’ and ‘high’ are both non-negative integers,
how long is the list <code class="highlighter-rouge">values[low:high]</code>?</p>

  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>
    <p>The list <code class="highlighter-rouge">values[low:high]</code> has <code class="highlighter-rouge">high - low</code> elements.  For example,
<code class="highlighter-rouge">values[1:4]</code> has the 3 elements <code class="highlighter-rouge">values[1]</code>, <code class="highlighter-rouge">values[2]</code>, and <code class="highlighter-rouge">values[3]</code>.
Note that the expression will only work if <code class="highlighter-rouge">high</code> is less than the total
length of the list <code class="highlighter-rouge">values</code>.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="from-strings-to-lists-and-back">From Strings to Lists and Back</h2>

  <p>Given this:</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'string to list:'</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="s">'tin'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'list to string:'</span><span class="p">,</span> <span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">'g'</span><span class="p">,</span> <span class="s">'o'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">]))</span>
</code></pre></div>  </div>
  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['t', 'i', 'n']
'gold'
</code></pre></div>  </div>

  <ol>
    <li>What does <code class="highlighter-rouge">list('some string')</code> do?</li>
    <li>What does <code class="highlighter-rouge">'-'.join(['x', 'y', 'z'])</code> generate?</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-2">Solution</h2>
    <ol>
      <li><a href="https://docs.python.org/3/library/stdtypes.html#list"><code class="highlighter-rouge">list('some string')</code></a> converts a string into a list containing all of its characters.</li>
      <li><a href="https://docs.python.org/3/library/stdtypes.html#str.join"><code class="highlighter-rouge">join</code></a> returns a string that is the <em>concatenation</em>
of each string element in the list and adds the separator between each element in the list. This results in
<code class="highlighter-rouge">x-y-z</code>. The separator between the elements is the string that provides this method.</li>
    </ol>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="working-with-the-end">Working With the End</h2>

  <p>What does the following program print?</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">element</span> <span class="o">=</span> <span class="s">'helium'</span>
<span class="k">print</span><span class="p">(</span><span class="n">element</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div>  </div>

  <ol>
    <li>How does Python interpret a negative index?</li>
    <li>If a list or string has N elements,
what is the most negative index that can safely be used with it,
and what location does that index represent?</li>
    <li>If <code class="highlighter-rouge">values</code> is a list, what does <code class="highlighter-rouge">del values[-1]</code> do?</li>
    <li>How can you display all elements but the last one without changing <code class="highlighter-rouge">values</code>?
(Hint: you will need to combine slicing and negative indexing.)</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-3">Solution</h2>
    <p>The program prints <code class="highlighter-rouge">m</code>.</p>
    <ol>
      <li>Python interprets a negative index as starting from the end (as opposed to
starting from the beginning).  The last element is <code class="highlighter-rouge">-1</code>.</li>
      <li>The last index that can safely be used with a list of N elements is element
<code class="highlighter-rouge">-N</code>, which represents the first element.</li>
      <li><code class="highlighter-rouge">del values[-1]</code> removes the last element from the list.</li>
      <li><code class="highlighter-rouge">values[:-1]</code></li>
    </ol>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="stepping-through-a-list">Stepping Through a List</h2>

  <p>What does the following program print?</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">element</span> <span class="o">=</span> <span class="s">'fluorine'</span>
<span class="k">print</span><span class="p">(</span><span class="n">element</span><span class="p">[::</span><span class="mi">2</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">element</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div>  </div>

  <ol>
    <li>If we write a slice as <code class="highlighter-rouge">low:high:stride</code>, what does <code class="highlighter-rouge">stride</code> do?</li>
    <li>What expression would select all of the even-numbered items from a collection?</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-4">Solution</h2>
    <p>The program prints</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">furn</span>
<span class="n">eniroulf</span>
</code></pre></div>    </div>
    <ol>
      <li><code class="highlighter-rouge">stride</code> is the step size of the slice</li>
      <li>The slice <code class="highlighter-rouge">1::2</code> selects all even-numbered items from a collection: it starts
with element <code class="highlighter-rouge">1</code> (which is the second element, since indexing starts at <code class="highlighter-rouge">0</code>),
goes on until the end (since no <code class="highlighter-rouge">end</code> is given), and uses a step size of <code class="highlighter-rouge">2</code>
(i.e., selects every second element).</li>
    </ol>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="slice-bounds">Slice Bounds</h2>

  <p>What does the following program print?</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">element</span> <span class="o">=</span> <span class="s">'lithium'</span>
<span class="k">print</span><span class="p">(</span><span class="n">element</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">20</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">element</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span>
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution-5">Solution</h2>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lithium</span>

</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="sort-and-sorted">Sort and Sorted</h2>

  <p>What do these two programs print?
In simple terms, explain the difference between <code class="highlighter-rouge">sorted(letters)</code> and <code class="highlighter-rouge">letters.sort()</code>.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Program A
</span><span class="n">letters</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">'gold'</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'letters is'</span><span class="p">,</span> <span class="n">letters</span><span class="p">,</span> <span class="s">'and result is'</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</code></pre></div>  </div>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Program B
</span><span class="n">letters</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">'gold'</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">letters</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">'letters is'</span><span class="p">,</span> <span class="n">letters</span><span class="p">,</span> <span class="s">'and result is'</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution-6">Solution</h2>
    <p>Program A prints</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">letters</span> <span class="ow">is</span> <span class="p">[</span><span class="s">'g'</span><span class="p">,</span> <span class="s">'o'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">]</span> <span class="ow">and</span> <span class="n">result</span> <span class="ow">is</span> <span class="p">[</span><span class="s">'d'</span><span class="p">,</span> <span class="s">'g'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'o'</span><span class="p">]</span>
</code></pre></div>    </div>
    <p>Program B prints</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">letters</span> <span class="ow">is</span> <span class="p">[</span><span class="s">'d'</span><span class="p">,</span> <span class="s">'g'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'o'</span><span class="p">]</span> <span class="ow">and</span> <span class="n">result</span> <span class="ow">is</span> <span class="bp">None</span>
</code></pre></div>    </div>
    <p><code class="highlighter-rouge">sorted(letters)</code> returns a sorted copy of the list <code class="highlighter-rouge">letters</code> (the original
list <code class="highlighter-rouge">letters</code> remains unchanged), while <code class="highlighter-rouge">letters.sort()</code> sorts the list
<code class="highlighter-rouge">letters</code> in-place and does not return anything.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="copying-or-not">Copying (or Not)</h2>

  <p>What do these two programs print?
In simple terms, explain the difference between <code class="highlighter-rouge">new = old</code> and <code class="highlighter-rouge">new = old[:]</code>.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Program A
</span><span class="n">old</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">'gold'</span><span class="p">)</span>
<span class="n">new</span> <span class="o">=</span> <span class="n">old</span>      <span class="c1"># simple assignment
</span><span class="n">new</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">'D'</span>
<span class="k">print</span><span class="p">(</span><span class="s">'new is'</span><span class="p">,</span> <span class="n">new</span><span class="p">,</span> <span class="s">'and old is'</span><span class="p">,</span> <span class="n">old</span><span class="p">)</span>
</code></pre></div>  </div>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Program B
</span><span class="n">old</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">'gold'</span><span class="p">)</span>
<span class="n">new</span> <span class="o">=</span> <span class="n">old</span><span class="p">[:]</span>   <span class="c1"># assigning a slice
</span><span class="n">new</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">'D'</span>
<span class="k">print</span><span class="p">(</span><span class="s">'new is'</span><span class="p">,</span> <span class="n">new</span><span class="p">,</span> <span class="s">'and old is'</span><span class="p">,</span> <span class="n">old</span><span class="p">)</span>
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution-7">Solution</h2>
    <p>Program A prints</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>new is ['D', 'o', 'l', 'd'] and old is ['D', 'o', 'l', 'd']
</code></pre></div>    </div>
    <p>Program B prints</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new</span> <span class="ow">is</span> <span class="p">[</span><span class="s">'D'</span><span class="p">,</span> <span class="s">'o'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">]</span> <span class="ow">and</span> <span class="n">old</span> <span class="ow">is</span> <span class="p">[</span><span class="s">'g'</span><span class="p">,</span> <span class="s">'o'</span><span class="p">,</span> <span class="s">'l'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">]</span>
</code></pre></div>    </div>
    <p><code class="highlighter-rouge">new = old</code> makes <code class="highlighter-rouge">new</code> a reference to the list <code class="highlighter-rouge">old</code>; <code class="highlighter-rouge">new</code> and <code class="highlighter-rouge">old</code> point
towards the same object.</p>

    <p><code class="highlighter-rouge">new = old[:]</code> however creates a new list object <code class="highlighter-rouge">new</code> containing all elements
from the list <code class="highlighter-rouge">old</code>; <code class="highlighter-rouge">new</code> and <code class="highlighter-rouge">old</code> are different objects.</p>
  </blockquote>
</blockquote>
:ET
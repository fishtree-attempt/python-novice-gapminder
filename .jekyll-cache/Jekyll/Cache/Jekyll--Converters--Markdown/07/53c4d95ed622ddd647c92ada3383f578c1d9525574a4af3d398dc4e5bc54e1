I"]ß<h2 id="break-programs-down-into-functions-to-make-them-easier-to-understand">Break programs down into functions to make them easier to understand.</h2>

<ul>
  <li>Human beings can only keep a few items in working memory at a time.</li>
  <li>Understand larger/more complicated ideas by understanding and combining pieces.
    <ul>
      <li>Components in a machine.</li>
      <li>Lemmas when proving theorems.</li>
    </ul>
  </li>
  <li>Functions serve the same purpose in programs.
    <ul>
      <li><em>Encapsulate</em> complexity so that we can treat it as a single ‚Äúthing‚Äù.</li>
    </ul>
  </li>
  <li>Also enables <em>re-use</em>.
    <ul>
      <li>Write one time, use many times.</li>
    </ul>
  </li>
</ul>

<h2 id="define-a-function-using-def-with-a-name-parameters-and-a-block-of-code">Define a function using <code class="highlighter-rouge">def</code> with a name, parameters, and a block of code.</h2>

<ul>
  <li>Begin the definition of a new function with <code class="highlighter-rouge">def</code>.</li>
  <li>Followed by the name of the function.
    <ul>
      <li>Must obey the same rules as variable names.</li>
    </ul>
  </li>
  <li>Then <em>parameters</em> in parentheses.
    <ul>
      <li>Empty parentheses if the function doesn‚Äôt take any inputs.</li>
      <li>We will discuss this in detail in a moment.</li>
    </ul>
  </li>
  <li>Then a colon.</li>
  <li>Then an indented block of code.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_greeting</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Hello!'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="defining-a-function-does-not-run-it">Defining a function does not run it.</h2>

<ul>
  <li>Defining a function does not run it.
    <ul>
      <li>Like assigning a value to a variable.</li>
    </ul>
  </li>
  <li>Must call the function to execute the code it contains.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_greeting</span><span class="p">()</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello!
</code></pre></div></div>

<h2 id="arguments-in-call-are-matched-to-parameters-in-definition">Arguments in call are matched to parameters in definition.</h2>

<ul>
  <li>Functions are most useful when they can operate on different data.</li>
  <li>Specify <em>parameters</em> when defining a function.
    <ul>
      <li>These become variables when the function is executed.</li>
      <li>Are assigned the arguments in the call (i.e., the values passed to the function).</li>
      <li>If you don‚Äôt name the arguments when using them in the call, the arguments will be matched to
parameters in the order the parameters are defined in the function.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_date</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">):</span>
    <span class="n">joined</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">year</span><span class="p">)</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">month</span><span class="p">)</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">day</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">joined</span><span class="p">)</span>

<span class="n">print_date</span><span class="p">(</span><span class="mi">1871</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1871/3/19
</code></pre></div></div>

<p>Or, we can name the arguments when we call the function, which allows us to
specify them in any order:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_date</span><span class="p">(</span><span class="n">month</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">19</span><span class="p">,</span> <span class="n">year</span><span class="o">=</span><span class="mi">1871</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1871/3/19
</code></pre></div></div>

<ul>
  <li>Via <a href="https://twitter.com/minisciencegirl/status/693486088963272705">Twitter</a>:
<code class="highlighter-rouge">()</code> contains the ingredients for the function
while the body contains the recipe.</li>
</ul>

<h2 id="functions-may-return-a-result-to-their-caller-using-return">Functions may return a result to their caller using <code class="highlighter-rouge">return</code>.</h2>

<ul>
  <li>Use <code class="highlighter-rouge">return ...</code> to give a value back to the caller.</li>
  <li>May occur anywhere in the function.</li>
  <li>But functions are easier to understand if <code class="highlighter-rouge">return</code> occurs:
    <ul>
      <li>At the start to handle special cases.</li>
      <li>At the very end, with a final result.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">average</span><span class="p">(</span><span class="n">values</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">average</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">'average of actual values:'</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>average of actual values: 2.6666666666666665
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'average of empty list:'</span><span class="p">,</span> <span class="n">average</span><span class="p">([]))</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>average of empty list: None
</code></pre></div></div>

<ul>
  <li>Remember: <a href="../04-built-in/">every function returns something</a>.</li>
  <li>A function that doesn‚Äôt explicitly <code class="highlighter-rouge">return</code> a value automatically returns <code class="highlighter-rouge">None</code>.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="n">print_date</span><span class="p">(</span><span class="mi">1871</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'result of call is:'</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1871/3/19
result of call is: None
</code></pre></div></div>

<blockquote class="challenge">
  <h2 id="identifying-syntax-errors">Identifying Syntax Errors</h2>

  <ol>
    <li>Read the code below and try to identify what the errors are
<em>without</em> running it.</li>
    <li>Run the code and read the error message.
Is it a <code class="highlighter-rouge">SyntaxError</code> or an <code class="highlighter-rouge">IndentationError</code>?</li>
    <li>Fix the error.</li>
    <li>Repeat steps 2 and 3 until you have fixed all the errors.</li>
  </ol>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">another_function</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"Syntax errors are annoying."</span><span class="p">)</span>
   <span class="k">print</span><span class="p">(</span><span class="s">"But at least python tells us about them!"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"So they are usually not too hard to fix."</span><span class="p">)</span>
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">another_function</span><span class="p">():</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"Syntax errors are annoying."</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"But at least Python tells us about them!"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"So they are usually not too hard to fix."</span><span class="p">)</span>
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="definition-and-use">Definition and Use</h2>

  <p>What does the following program print?</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">report</span><span class="p">(</span><span class="n">pressure</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'pressure is'</span><span class="p">,</span> <span class="n">pressure</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'calling'</span><span class="p">,</span> <span class="n">report</span><span class="p">,</span> <span class="mf">22.5</span><span class="p">)</span>
</code></pre></div>  </div>
  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>calling &lt;function report at 0x7fd128ff1bf8&gt; 22.5
</code></pre></div>    </div>

    <p>A function call always needs parenthesis, otherwise you get memory address of the function object. So, if we wanted to call the function named report, and give it the value 22.5 to report on, we could have our function call as follows</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print("calling")
report(22.5)
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="order-of-operations">Order of Operations</h2>

  <p>The example above:</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="n">print_date</span><span class="p">(</span><span class="mi">1871</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'result of call is:'</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</code></pre></div>  </div>

  <p>printed:</p>
  <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1871/3/19
result of call is: None
</code></pre></div>  </div>

  <p>Explain why the two lines of output appeared in the order they did.</p>

  <p>What‚Äôs wrong in this example?</p>
  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="n">print_date</span><span class="p">(</span><span class="mi">1871</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">19</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_date</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">):</span>
   <span class="n">joined</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">year</span><span class="p">)</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">month</span><span class="p">)</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">day</span><span class="p">)</span>
   <span class="k">print</span><span class="p">(</span><span class="n">joined</span><span class="p">)</span>
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution-2">Solution</h2>

    <ol>
      <li>The first line of output (<code class="highlighter-rouge">1871/3/19</code>) is from the print function inside <code class="highlighter-rouge">print_date()</code>, while the second line
is from the print function below the function call. All of the code inside <code class="highlighter-rouge">print_date()</code> is executed first, and
the program then ‚Äúleaves‚Äù the function and executes the rest of the code.</li>
      <li>The problem with the example is that the function is defined <em>after</em> the call to the function is made. Python
therefore doesn‚Äôt understand the function call.</li>
    </ol>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="encapsulation">Encapsulation</h2>

  <p>Fill in the blanks to create a function that takes a single filename as an argument,
loads the data in the file named by the argument,
and returns the minimum value in that data.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="k">def</span> <span class="nf">min_in_data</span><span class="p">(</span><span class="n">____</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">____</span>
    <span class="k">return</span> <span class="n">____</span>
</code></pre></div>  </div>
  <blockquote class="solution">
    <h2 id="solution-3">Solution</h2>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="k">def</span> <span class="nf">min_in_data</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">data</span><span class="o">.</span><span class="nb">min</span><span class="p">()</span>
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="find-the-first">Find the First</h2>

  <p>Fill in the blanks to create a function that takes a list of numbers as an argument
and returns the first negative value in the list.
What does your function do if the list is empty?</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">first_negative</span><span class="p">(</span><span class="n">values</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">____</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">____</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">____</span>
</code></pre></div>  </div>
  <blockquote class="solution">
    <h2 id="solution-4">Solution</h2>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">first_negative</span><span class="p">(</span><span class="n">values</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">values</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">v</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">v</span>
</code></pre></div>    </div>
    <p>If an empty list is passed to this function, it returns <code class="highlighter-rouge">None</code>:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">print</span><span class="p">(</span><span class="n">first_negative</span><span class="p">(</span><span class="n">my_list</span><span class="p">))</span>
</code></pre></div>    </div>
    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="calling-by-name">Calling by Name</h2>

  <p>Earlier we saw this function:</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def print_date(year, month, day):
    joined = str(year) + '/' + str(month) + '/' + str(day)
    print(joined)
</code></pre></div>  </div>
  <p>We saw that we can call the function using <em>named arguments</em>, like this:</p>
  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_date</span><span class="p">(</span><span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">year</span><span class="o">=</span><span class="mi">2003</span><span class="p">)</span>
</code></pre></div>  </div>

  <ol class="language-python">
    <li>What does <code class="highlighter-rouge">print_date(day=1, month=2, year=2003)</code> print?</li>
    <li>When have you seen a function call like this before?</li>
    <li>When and why is it useful to call functions this way?</li>
  </ol>
  <blockquote class="solution">
    <h2 id="solution-5">Solution</h2>

    <ol>
      <li><code class="highlighter-rouge">2003/2/1</code></li>
      <li>We saw examples of using <em>named arguments</em> when working with the pandas library. For example, when reading in a dataset 
using <code class="highlighter-rouge">data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')</code>, the last argument <code class="highlighter-rouge">index_col</code> is a 
named argument.</li>
      <li>Using named arguments can make code more readable since one can see from the function call what name the different arguments 
have inside the function. It can also reduce the chances of passing arguments in the wrong order, since by using named arguments 
the order doesn‚Äôt matter.</li>
    </ol>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="encapsulate-of-ifprint-block">Encapsulate of If/Print Block</h2>

  <p>The code below will run on a label-printer for chicken eggs.  A digital scale will report a chicken egg mass (in grams) to the computer and then the computer will print a label.</p>

  <p>Please re-write the code so that the if-block is folded into a function.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">import</span> <span class="nn">random</span>
 <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>

    <span class="c1"># simulating the mass of a chicken egg
</span>    <span class="c1"># the (random) mass will be 70 +/- 20 grams
</span>    <span class="n">mass</span><span class="o">=</span><span class="mi">70</span><span class="o">+</span><span class="mf">20.0</span><span class="o">*</span><span class="p">(</span><span class="mf">2.0</span><span class="o">*</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="n">mass</span><span class="p">)</span>
   
    <span class="c1">#egg sizing machinery prints a label
</span>    <span class="k">if</span><span class="p">(</span><span class="n">mass</span><span class="o">&gt;=</span><span class="mi">85</span><span class="p">):</span>
       <span class="k">print</span><span class="p">(</span><span class="s">"jumbo"</span><span class="p">)</span>
    <span class="k">elif</span><span class="p">(</span><span class="n">mass</span><span class="o">&gt;=</span><span class="mi">70</span><span class="p">):</span>
       <span class="k">print</span><span class="p">(</span><span class="s">"large"</span><span class="p">)</span>
    <span class="k">elif</span><span class="p">(</span><span class="n">mass</span><span class="o">&lt;</span><span class="mi">70</span> <span class="ow">and</span> <span class="n">mass</span><span class="o">&gt;=</span><span class="mi">55</span><span class="p">):</span>
       <span class="k">print</span><span class="p">(</span><span class="s">"medium"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
       <span class="k">print</span><span class="p">(</span><span class="s">"small"</span><span class="p">)</span>
</code></pre></div>  </div>

  <p>The simplified program  follows.  What function definition will make it functional?</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># revised version
</span> <span class="kn">import</span> <span class="nn">random</span>
 <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>

    <span class="c1"># simulating the mass of a chicken egg
</span>    <span class="c1"># the (random) mass will be 70 +/- 20 grams
</span>    <span class="n">mass</span><span class="o">=</span><span class="mi">70</span><span class="o">+</span><span class="mf">20.0</span><span class="o">*</span><span class="p">(</span><span class="mf">2.0</span><span class="o">*</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="n">mass</span><span class="p">,</span><span class="n">print_egg_label</span><span class="p">(</span><span class="n">mass</span><span class="p">))</span>    

</code></pre></div>  </div>

  <ol>
    <li>Create a function definition for <code class="highlighter-rouge">print_egg_label()</code> that will work with the revised program above.  Note, the function‚Äôs return value will be significant. Sample output might be <code class="highlighter-rouge">71.23 large</code>.</li>
    <li>A dirty egg might have a mass of more than 90 grams, and a spoiled or broken egg will probably have a mass that‚Äôs less than 50 grams.  Modify your <code class="highlighter-rouge">print_egg_label()</code> function to account for these error conditions. Sample output could be <code class="highlighter-rouge">25 too light, probably spoiled</code>.</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-6">Solution</h2>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_egg_label</span><span class="p">(</span><span class="n">mass</span><span class="p">):</span>
    <span class="c1">#egg sizing machinery prints a label
</span>    <span class="k">if</span><span class="p">(</span><span class="n">mass</span><span class="o">&gt;=</span><span class="mi">90</span><span class="p">):</span>
        <span class="k">return</span><span class="p">(</span><span class="s">"warning: egg might be dirty"</span><span class="p">)</span>
    <span class="k">elif</span><span class="p">(</span><span class="n">mass</span><span class="o">&gt;=</span><span class="mi">85</span><span class="p">):</span>
        <span class="k">return</span><span class="p">(</span><span class="s">"jumbo"</span><span class="p">)</span>
    <span class="k">elif</span><span class="p">(</span><span class="n">mass</span><span class="o">&gt;=</span><span class="mi">70</span><span class="p">):</span>
        <span class="k">return</span><span class="p">(</span><span class="s">"large"</span><span class="p">)</span>
    <span class="k">elif</span><span class="p">(</span><span class="n">mass</span><span class="o">&lt;</span><span class="mi">70</span> <span class="ow">and</span> <span class="n">mass</span><span class="o">&gt;=</span><span class="mi">55</span><span class="p">):</span>
        <span class="k">return</span><span class="p">(</span><span class="s">"medium"</span><span class="p">)</span>
    <span class="k">elif</span><span class="p">(</span><span class="n">mass</span><span class="o">&lt;</span><span class="mi">50</span><span class="p">):</span>
        <span class="k">return</span><span class="p">(</span><span class="s">"too light, probably spoiled"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span><span class="p">(</span><span class="s">"small"</span><span class="p">)</span>
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="encapsulating-data-analysis">Encapsulating Data Analysis</h2>

  <p>Assume that the following code has been executed:</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'data/gapminder_gdp_asia.csv'</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">japan</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'Japan'</span><span class="p">]</span>
</code></pre></div>  </div>

  <p>1.Complete the statements below to obtain the average GDP for Japan
across the years reported for the 1980s.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">year</span> <span class="o">=</span> <span class="mi">1983</span>
<span class="n">gdp_decade</span> <span class="o">=</span> <span class="s">'gdpPercap_'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">year</span> <span class="o">//</span> <span class="n">____</span><span class="p">)</span>
<span class="n">avg</span> <span class="o">=</span> <span class="p">(</span><span class="n">japan</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">gdp_decade</span> <span class="o">+</span> <span class="n">___</span><span class="p">]</span> <span class="o">+</span> <span class="n">japan</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">gdp_decade</span> <span class="o">+</span> <span class="n">___</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
</code></pre></div>  </div>

  <p>2.Abstract the code above into a single function.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">avg_gdp_in_decade</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">continent</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'data/gapminder_gdp_'</span><span class="o">+</span><span class="n">___</span><span class="o">+</span><span class="s">'.csv'</span><span class="p">,</span><span class="n">delimiter</span><span class="o">=</span><span class="s">','</span><span class="p">,</span><span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">____</span>
    <span class="n">____</span>
    <span class="n">____</span>
    <span class="k">return</span> <span class="n">avg</span>
</code></pre></div>  </div>

  <p>3.How would you generalize this function
   if you did not know beforehand which specific years occurred as columns in the data?
   For instance, what if we also had data from years ending in 1 and 9 for each decade?
   (Hint: use the columns to filter out the ones that correspond to the decade,
   instead of enumerating them in the code.)</p>

  <blockquote class="solution">
    <h2 id="solution-7">Solution</h2>

    <p>1.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">year</span> <span class="o">=</span> <span class="mi">1983</span>
<span class="n">gdp_decade</span> <span class="o">=</span> <span class="s">'gdpPercap_'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">year</span> <span class="o">//</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">avg</span> <span class="o">=</span> <span class="p">(</span><span class="n">japan</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">gdp_decade</span> <span class="o">+</span> <span class="s">'2'</span><span class="p">]</span> <span class="o">+</span> <span class="n">japan</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">gdp_decade</span> <span class="o">+</span> <span class="s">'7'</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
</code></pre></div>    </div>

    <p>2.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">avg_gdp_in_decade</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">continent</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'data/gapminder_gdp_'</span> <span class="o">+</span> <span class="n">continent</span> <span class="o">+</span> <span class="s">'.csv'</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">country</span><span class="p">]</span>
    <span class="n">gdp_decade</span> <span class="o">=</span> <span class="s">'gdpPercap_'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">year</span> <span class="o">//</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">avg</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">gdp_decade</span> <span class="o">+</span> <span class="s">'2'</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">gdp_decade</span> <span class="o">+</span> <span class="s">'7'</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span>
    <span class="k">return</span> <span class="n">avg</span>
</code></pre></div>    </div>

    <p>3.</p>

    <p>We need to loop over the reported years
   to obtain the average for the relevant ones in the data.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">avg_gdp_in_decade</span><span class="p">(</span><span class="n">country</span><span class="p">,</span> <span class="n">continent</span><span class="p">,</span> <span class="n">year</span><span class="p">):</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'data/gapminder_gdp_'</span> <span class="o">+</span> <span class="n">continent</span> <span class="o">+</span> <span class="s">'.csv'</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">country</span><span class="p">]</span>
    <span class="n">gdp_decade</span> <span class="o">=</span> <span class="s">'gdpPercap_'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">year</span> <span class="o">//</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">total</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">num_years</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">yr_header</span> <span class="ow">in</span> <span class="n">c</span><span class="o">.</span><span class="n">index</span><span class="p">:</span> <span class="c1"># c's index contains reported years
</span>        <span class="k">if</span> <span class="n">yr_header</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">gdp_decade</span><span class="p">):</span>
            <span class="n">total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">yr_header</span><span class="p">]</span>
            <span class="n">num_years</span> <span class="o">=</span> <span class="n">num_years</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">total</span><span class="o">/</span><span class="n">num_years</span>
</code></pre></div>    </div>
    <p>The function can now be called by:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">avg_gdp_in_decade</span><span class="p">(</span><span class="s">'Japan'</span><span class="p">,</span><span class="s">'asia'</span><span class="p">,</span><span class="mi">1983</span><span class="p">)</span>
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>20880.023800000003
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="simulating-a-dynamical-system">Simulating a dynamical system</h2>

  <p>In mathematics, a <a href="https://en.wikipedia.org/wiki/Dynamical_system">dynamical system</a> is a system in which a function describes the time dependence of a point in a geometrical space.  A canonical example of a dynamical system is a system called the <a href="https://en.wikipedia.org/wiki/Logistic_map">logistic map</a>.</p>

  <ol>
    <li>
      <p>Define a function called <code class="highlighter-rouge">logistic_map</code> that takes two inputs: <code class="highlighter-rouge">x</code>, representing the state of the system at time <em>t</em>, and a parameter <code class="highlighter-rouge">r</code>. This function should return a value representing the state of the system at time <em>t+1</em>.</p>
    </li>
    <li>
      <p>Using a <code class="highlighter-rouge">for</code> loop, iterate the <code class="highlighter-rouge">logistic_map</code> function defined in part 1 starting from an initial condition of 0.5 for <code class="highlighter-rouge">t_final=10</code>, <code class="highlighter-rouge">100</code>, and <code class="highlighter-rouge">1000</code> periods. Store the intermediate results in a list so that after the <code class="highlighter-rouge">for</code> loop terminates you have accumulated a sequence of values representing the state of the logistic map at time <em>t=0,1,‚Ä¶,t_final</em>.</p>
    </li>
    <li>
      <p>Encapsulate the logic of your <code class="highlighter-rouge">for</code> loop into a function called <code class="highlighter-rouge">iterate</code> that takes the initial condition as its first input, the parameter <code class="highlighter-rouge">t_final</code> as its second input and the parameter <code class="highlighter-rouge">r</code> as its third input. The function should return the list of values representing the state of the logistic map at time <em>t=0,1,‚Ä¶,t_final</em>.</p>
    </li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-8">Solution</h2>

    <p>1.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">logistic_map</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">r</span> <span class="o">*</span> <span class="n">x</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span>
</code></pre></div>    </div>

    <p>2.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">initial_condition</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">t_final</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">r</span> <span class="o">=</span> <span class="mf">1.0</span>
<span class="n">trajectory</span> <span class="o">=</span> <span class="p">[</span><span class="n">initial_condition</span><span class="p">]</span>
<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">t_final</span><span class="p">):</span>
    <span class="n">trajectory</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="n">logistic_map</span><span class="p">(</span><span class="n">trajectory</span><span class="p">[</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">r</span><span class="p">)</span> <span class="p">)</span>
</code></pre></div>    </div>

    <p>3.</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">iterate</span><span class="p">(</span><span class="n">initial_condition</span><span class="p">,</span> <span class="n">t_final</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
    <span class="n">trajectory</span> <span class="o">=</span> <span class="p">[</span><span class="n">initial_condition</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">t_final</span><span class="p">):</span>
        <span class="n">trajectory</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="n">logistic_map</span><span class="p">(</span><span class="n">trajectory</span><span class="p">[</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">r</span><span class="p">)</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">trajectory</span>
</code></pre></div>    </div>
  </blockquote>
</blockquote>
:ET
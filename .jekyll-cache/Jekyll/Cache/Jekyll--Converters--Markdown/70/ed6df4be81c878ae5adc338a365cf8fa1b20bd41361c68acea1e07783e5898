I"kQ<h2 id="use-variables-to-store-values">Use variables to store values.</h2>

<ul>
  <li><strong>Variables</strong> are names for values.</li>
  <li>In Python the <code class="highlighter-rouge">=</code> symbol assigns the value on the right to the name on the left.</li>
  <li>The variable is created when a value is assigned to it.</li>
  <li>Here, Python assigns an age to a variable <code class="highlighter-rouge">age</code>
and a name in quotes to a variable <code class="highlighter-rouge">first_name</code>.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">age</span> <span class="o">=</span> <span class="mi">42</span>
<span class="n">first_name</span> <span class="o">=</span> <span class="s">'Ahmed'</span>
</code></pre></div></div>

<ul>
  <li>Variable names
    <ul>
      <li>can <strong>only</strong> contain letters, digits, and underscore <code class="highlighter-rouge">_</code> (typically used to separate words in long variable names)</li>
      <li>cannot start with a digit</li>
      <li>are <strong>case sensitive</strong> (age, Age and AGE are three different variables)</li>
    </ul>
  </li>
  <li>Variable names that start with underscores like <code class="highlighter-rouge">__alistairs_real_age</code> have a special meaning
so we won’t do that until we understand the convention.</li>
</ul>

<h2 id="use-print-to-display-values">Use <code class="highlighter-rouge">print</code> to display values.</h2>

<ul>
  <li>Python has a built-in function called <code class="highlighter-rouge">print</code> that prints things as text.</li>
  <li>Call the function (i.e., tell Python to run it) by using its name.</li>
  <li>Provide values to the function (i.e., the things to print) in parentheses.</li>
  <li>To add a string to the printout, wrap the string in single or double quotes.</li>
  <li>The values passed to the function are called <strong>arguments</strong></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="s">'is'</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="s">'years old'</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ahmed is 42 years old
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">print</code> automatically puts a single space between items to separate them.</li>
  <li>And wraps around to a new line at the end.</li>
</ul>

<h2 id="variables-must-be-created-before-they-are-used">Variables must be created before they are used.</h2>

<ul>
  <li>If a variable doesn’t exist yet, or if the name has been mis-spelled,
Python reports an error. (Unlike some languages, which “guess” a default value.)</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">last_name</span><span class="p">)</span>
</code></pre></div></div>
<div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&lt;ipython-input-1-c1fbb4e96102&gt; in &lt;module&gt;()
----&gt; 1 print(last_name)

NameError: name 'last_name' is not defined
</code></pre></div></div>

<ul>
  <li>The last line of an error message is usually the most informative.</li>
  <li>We will look at error messages in detail <a href="../15-scope/#reading-error-messages">later</a>.</li>
</ul>

<blockquote class="callout">
  <h2 id="variables-persist-between-cells">Variables Persist Between Cells</h2>

  <p>Be aware that it is the <em>order</em> of execution of cells that is important in a Jupyter notebook, not the order
in which they appear. Python will remember <em>all</em> the code that was run previously, including any variables you have
defined, irrespective of the order in the notebook. Therefore if you define variables lower down the notebook and then
(re)run cells further up, those defined further down will still be present. As an example, create two cells with the
following content, in this order:</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">myval</span><span class="p">)</span>
</code></pre></div>  </div>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">myval</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div>  </div>

  <p>If you execute this in order, the first cell will give an error. However, if you run the first cell <em>after</em> the second
cell it will print out <code class="highlighter-rouge">1</code>. To prevent confusion, it can be helpful to use the <code class="highlighter-rouge">Kernel</code> -&gt; <code class="highlighter-rouge">Restart &amp; Run All</code> option which
clears the interpreter and runs everything from a clean slate going top to bottom.</p>
</blockquote>

<h2 id="variables-can-be-used-in-calculations">Variables can be used in calculations.</h2>

<ul>
  <li>We can use variables in calculations just as if they were values.
    <ul>
      <li>Remember, we assigned the value <code class="highlighter-rouge">42</code> to <code class="highlighter-rouge">age</code> a few lines ago.</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">age</span> <span class="o">=</span> <span class="n">age</span> <span class="o">+</span> <span class="mi">3</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Age in three years:'</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Age in three years: 45
</code></pre></div></div>

<h2 id="use-an-index-to-get-a-single-character-from-a-string">Use an index to get a single character from a string.</h2>

<ul>
  <li>The characters (individual letters, numbers, and so on) in a string are
ordered. For example, the string <code class="highlighter-rouge">'AB'</code> is not the same as <code class="highlighter-rouge">'BA'</code>. Because of
this ordering, we can treat the string as a list of characters.</li>
  <li>Each position in the string (first, second, etc.) is given a number. This
number is called an <strong>index</strong> or sometimes a subscript.</li>
  <li>Indices are numbered from 0.</li>
  <li>Use the position’s index in square brackets to get the character at that
position.</li>
</ul>

<p><img src="../fig/2_indexing.svg" alt="an illustration of indexing" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">atom_name</span> <span class="o">=</span> <span class="s">'helium'</span>
<span class="k">print</span><span class="p">(</span><span class="n">atom_name</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>h
</code></pre></div></div>

<h2 id="use-a-slice-to-get-a-substring">Use a slice to get a substring.</h2>

<ul>
  <li>A part of a string is called a <strong>substring</strong>. A substring can be as short as a
single character.</li>
  <li>An item in a list is called an element. Whenever we treat a string as if it
were a list, the string’s elements are its individual characters.</li>
  <li>A slice is a part of a string (or, more generally, any list-like thing).</li>
  <li>We take a slice by using <code class="highlighter-rouge">[start:stop]</code>, where <code class="highlighter-rouge">start</code> is replaced with the
index of the first element we want and <code class="highlighter-rouge">stop</code> is replaced with the index of
the element just after the last element we want.</li>
  <li>Mathematically, you might say that a slice selects <code class="highlighter-rouge">[start:stop)</code>.</li>
  <li>The difference between <code class="highlighter-rouge">stop</code> and <code class="highlighter-rouge">start</code> is the slice’s length.</li>
  <li>Taking a slice does not change the contents of the original string. Instead,
the slice is a copy of part of the original string.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">atom_name</span> <span class="o">=</span> <span class="s">'sodium'</span>
<span class="k">print</span><span class="p">(</span><span class="n">atom_name</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sod
</code></pre></div></div>

<h2 id="use-the-built-in-function-len-to-find-the-length-of-a-string">Use the built-in function <code class="highlighter-rouge">len</code> to find the length of a string.</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="s">'helium'</span><span class="p">))</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6
</code></pre></div></div>

<ul>
  <li>Nested functions are evaluated from the inside out,
 like in mathematics.</li>
</ul>

<h2 id="python-is-case-sensitive">Python is case-sensitive.</h2>

<ul>
  <li>Python thinks that upper- and lower-case letters are different,
so <code class="highlighter-rouge">Name</code> and <code class="highlighter-rouge">name</code> are different variables.</li>
  <li>There are conventions for using upper-case letters at the start of variable names so we will use lower-case letters for now.</li>
</ul>

<h2 id="use-meaningful-variable-names">Use meaningful variable names.</h2>

<ul>
  <li>Python doesn’t care what you call variables as long as they obey the rules
(alphanumeric characters and the underscore).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flabadab</span> <span class="o">=</span> <span class="mi">42</span>
<span class="n">ewr_422_yY</span> <span class="o">=</span> <span class="s">'Ahmed'</span>
<span class="k">print</span><span class="p">(</span><span class="n">ewr_422_yY</span><span class="p">,</span> <span class="s">'is'</span><span class="p">,</span> <span class="n">flabadab</span><span class="p">,</span> <span class="s">'years old'</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>Use meaningful variable names to help other people understand what the program does.</li>
  <li>The most important “other person” is your future self.</li>
</ul>

<blockquote class="challenge">
  <h2 id="swapping-values">Swapping Values</h2>

  <p>Fill the table showing the values of the variables in this program
<em>after</em> each statement is executed.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Command  # Value of x   # Value of y   # Value of swap #
</span><span class="n">x</span> <span class="o">=</span> <span class="mf">1.0</span>    <span class="c1">#              #              #               #
</span><span class="n">y</span> <span class="o">=</span> <span class="mf">3.0</span>    <span class="c1">#              #              #               #
</span><span class="n">swap</span> <span class="o">=</span> <span class="n">x</span>   <span class="c1">#              #              #               #
</span><span class="n">x</span> <span class="o">=</span> <span class="n">y</span>      <span class="c1">#              #              #               #
</span><span class="n">y</span> <span class="o">=</span> <span class="n">swap</span>   <span class="c1">#              #              #               #
</span></code></pre></div>  </div>
  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Command  # Value of x   # Value of y   # Value of swap #
x = 1.0    # 1.0          # not defined  # not defined   #
y = 3.0    # 1.0          # 3.0          # not defined   #
swap = x   # 1.0          # 3.0          # 1.0           #
x = y      # 3.0          # 3.0          # 1.0           #
y = swap   # 3.0          # 1.0          # 1.0           #
</code></pre></div>    </div>

    <p>These three lines exchange the values in <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code> using the <code class="highlighter-rouge">swap</code>
variable for temporary storage. This is a fairly common programming idiom.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="predicting-values">Predicting Values</h2>

  <p>What is the final value of <code class="highlighter-rouge">position</code> in the program below?
(Try to predict the value without running the program,
then check your prediction.)</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">initial</span> <span class="o">=</span> <span class="s">'left'</span>
<span class="n">position</span> <span class="o">=</span> <span class="n">initial</span>
<span class="n">initial</span> <span class="o">=</span> <span class="s">'right'</span>
</code></pre></div>  </div>
  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'left'
</code></pre></div>    </div>

    <p>The <code class="highlighter-rouge">initial</code> variable is assigned the value <code class="highlighter-rouge">'left'</code>.
In the second line, the <code class="highlighter-rouge">position</code> variable also receives
the string value <code class="highlighter-rouge">'left'</code>. In third line, the <code class="highlighter-rouge">initial</code> variable is given the
value <code class="highlighter-rouge">'right'</code>, but the <code class="highlighter-rouge">position</code> variable retains its string value
of <code class="highlighter-rouge">'left'</code>.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="challenge">Challenge</h2>

  <p>If you assign <code class="highlighter-rouge">a = 123</code>,
what happens if you try to get the second digit of <code class="highlighter-rouge">a</code> via <code class="highlighter-rouge">a[1]</code>?</p>

  <blockquote class="solution">
    <h2 id="solution-2">Solution</h2>
    <p>Numbers are not strings or sequences and Python will raise an error if you try to perform an index operation on a
number. In the <a href="../03-types-conversion/#convert-numbers-and-strings">next lesson on types and type conversion</a>
we will learn more about types and how to convert between different types. If you want the Nth digit of a number you
can convert it into a string using the <code class="highlighter-rouge">str</code> built-in function and then perform an index operation on that string.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">123</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div>    </div>
    <div class="error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TypeError: 'int' object is not subscriptable
</code></pre></div>    </div>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div>    </div>
    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="choosing-a-name">Choosing a Name</h2>

  <p>Which is a better variable name, <code class="highlighter-rouge">m</code>, <code class="highlighter-rouge">min</code>, or <code class="highlighter-rouge">minutes</code>?
Why?
Hint: think about which code you would rather inherit
from someone who is leaving the lab:</p>

  <ol>
    <li><code class="highlighter-rouge">ts = m * 60 + s</code></li>
    <li><code class="highlighter-rouge">tot_sec = min * 60 + sec</code></li>
    <li><code class="highlighter-rouge">total_seconds = minutes * 60 + seconds</code></li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-3">Solution</h2>

    <p><code class="highlighter-rouge">minutes</code> is better because <code class="highlighter-rouge">min</code> might mean something like “minimum”
(and actually is an existing built-in function in Python that we will cover later).</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="slicing-practice">Slicing practice</h2>

  <p>What does the following program print?</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">atom_name</span> <span class="o">=</span> <span class="s">'carbon'</span>
<span class="k">print</span><span class="p">(</span><span class="s">'atom_name[1:3] is:'</span><span class="p">,</span> <span class="n">atom_name</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span>
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution-4">Solution</h2>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>atom_name[1:3] is: ar
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="slicing-concepts">Slicing concepts</h2>

  <ol>
    <li>What does <code class="highlighter-rouge">thing[low:high]</code> do?</li>
    <li>What does <code class="highlighter-rouge">thing[low:]</code> (without a value after the colon) do?</li>
    <li>What does <code class="highlighter-rouge">thing[:high]</code> (without a value before the colon) do?</li>
    <li>What does <code class="highlighter-rouge">thing[:]</code> (just a colon) do?</li>
    <li>What does <code class="highlighter-rouge">thing[number:some-negative-number]</code> do?</li>
    <li>What happens when you choose a <code class="highlighter-rouge">high</code> value which is out of range? (i.e., try <code class="highlighter-rouge">atom_name[0:15]</code>)</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solutions">Solutions</h2>

    <ol>
      <li><code class="highlighter-rouge">thing[low:high]</code> returns a slice from <code class="highlighter-rouge">low</code> to the value before <code class="highlighter-rouge">high</code></li>
      <li><code class="highlighter-rouge">thing[low:]</code> returns a slice from <code class="highlighter-rouge">low</code> all the way to the end of <code class="highlighter-rouge">thing</code></li>
      <li><code class="highlighter-rouge">thing[:high]</code> returns a slice from the beginning of <code class="highlighter-rouge">thing</code> to the value before <code class="highlighter-rouge">high</code></li>
      <li><code class="highlighter-rouge">thing[:]</code> returns all of <code class="highlighter-rouge">thing</code></li>
      <li><code class="highlighter-rouge">thing[number:some-negative-number]</code> returns a slice from <code class="highlighter-rouge">number</code> to <code class="highlighter-rouge">some-negative-number</code> values from the end of <code class="highlighter-rouge">thing</code></li>
      <li>If a part of the slice is out of range, the operation does not fail. <code class="highlighter-rouge">atom_name[0:15]</code> gives the same result as <code class="highlighter-rouge">atom_name[0:]</code>.</li>
    </ol>

  </blockquote>
</blockquote>
:ET
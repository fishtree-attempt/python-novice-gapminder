I"˚=<h2 id="coding-style">Coding style</h2>

<p>Coding style helps us to understand the code better. It helps to maintain and change the code.
Python relies strongly on coding style, as we may notice by the indentation we apply to lines to define different blocks of code.
Python proposes a standard style through one of its first Python Enhancement Proposals (PEP), <a href="https://www.python.org/dev/peps/pep-0008">PEP8</a>, and highlight the importance of readability in the <a href="https://www.python.org/dev/peps/pep-0020">Zen of Python</a>.</p>

<p>We may highlight some points:</p>
<ul>
  <li>document your code</li>
  <li>use clear, meaningful variable names</li>
  <li>use white-space, <em>not</em> tabs, to indent lines</li>
</ul>

<h2 id="follow-standard-python-style-in-your-code">Follow standard Python style in your code.</h2>

<ul>
  <li><a href="https://www.python.org/dev/peps/pep-0008">PEP8</a>:
a style guide for Python that discusses topics such as how you should name variables,
how you should use indentation in your code,
how you should structure your <code class="highlighter-rouge">import</code> statements,
etc.
Adhering to PEP8 makes it easier for other Python developers to read and understand your code,
and to understand what their contributions should look like.
The <a href="https://pypi.python.org/pypi/pep8">PEP8 application and Python library</a>
can check your code for compliance with PEP8.</li>
  <li><a href="https://google.github.io/styleguide/pyguide.html">Google style guide on Python</a> 
supports the use of PEP8 and extend the coding style to more specific structure of 
a Python code, which may be interesting also to follow.
Google‚Äôs <a href="https://github.com/google/yapf/">formatting application is called ‚Äúyapf‚Äù</a>.</li>
</ul>

<h2 id="use-assertions-to-check-for-internal-errors">Use assertions to check for internal errors.</h2>

<p>Assertions are a simple, but powerful method for making sure that the context in which your code is executing is as you expect.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calc_bulk_density</span><span class="p">(</span><span class="n">mass</span><span class="p">,</span> <span class="n">volume</span><span class="p">):</span>
    <span class="s">'''Return dry bulk density = powder mass / powder volume.'''</span>
    <span class="k">assert</span> <span class="n">volume</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">mass</span> <span class="o">/</span> <span class="n">volume</span>
</code></pre></div></div>

<p>If the assertion is <code class="highlighter-rouge">False</code>, the Python interpreter raises an <code class="highlighter-rouge">AssertionError</code> runtime exception. The source code for the expression that failed will be displayed as part of the error message. To ignore assertions in your code run the interpreter with the ‚Äò-O‚Äô (optimize) switch. Assertions should contain only simple checks and never change the state of the program. For example, an assertion should never contain an assignment.</p>

<h2 id="use-docstrings-to-provide-builtin-help">Use docstrings to provide builtin help.</h2>

<ul>
  <li>If the first thing in a function is a character string
that is not assigned directly to a variable,
Python attaches it to the function as the builtin help variable.</li>
  <li>Called a <em>docstring</em> (short for ‚Äúdocumentation string‚Äù).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">average</span><span class="p">(</span><span class="n">values</span><span class="p">):</span>
    <span class="s">"Return average of values, or None if no values are supplied."</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>

<span class="n">help</span><span class="p">(</span><span class="n">average</span><span class="p">)</span>
</code></pre></div></div>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Help on function average in module __main__:

average(values)
    Return average of values, or None if no values are supplied.
</code></pre></div></div>

<blockquote class="callout">
  <h2 id="multiline-strings">Multiline Strings</h2>

  <p>Often use <em>multiline strings</em> for documentation.
These start and end with three quote characters (either single or double)
and end with three matching characters.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""This string spans
multiple lines.

Blank lines are allowed."""</span>
</code></pre></div>  </div>
</blockquote>

<blockquote class="challenge">
  <h2 id="what-will-be-shown">What Will Be Shown?</h2>

  <p>Highlight the lines in the code below that will be available as online help.
Are there lines that should be made available, but won‚Äôt be?
Will any lines produce a syntax error or a runtime error?</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"Find maximum edit distance between multiple sequences."</span>
<span class="c1"># This finds the maximum distance between all sequences.
</span>
<span class="k">def</span> <span class="nf">overall_max</span><span class="p">(</span><span class="n">sequences</span><span class="p">):</span>
    <span class="s">'''Determine overall maximum edit distance.'''</span>

    <span class="n">highest</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">left</span> <span class="ow">in</span> <span class="n">sequences</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">right</span> <span class="ow">in</span> <span class="n">sequences</span><span class="p">:</span>
            <span class="s">'''Avoid checking sequence against itself.'''</span>
            <span class="k">if</span> <span class="n">left</span> <span class="o">!=</span> <span class="n">right</span><span class="p">:</span>
                <span class="n">this</span> <span class="o">=</span> <span class="n">edit_distance</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
                <span class="n">highest</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">highest</span><span class="p">,</span> <span class="n">this</span><span class="p">)</span>

    <span class="c1"># Report.
</span>    <span class="k">return</span> <span class="n">highest</span>
</code></pre></div>  </div>
</blockquote>

<blockquote class="challenge">
  <h2 id="document-this">Document This</h2>

  <p>Turn the comment on the following function into a docstring
and check that <code class="highlighter-rouge">help</code> displays it properly.</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">middle</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
    <span class="c1"># Return the middle value of three.
</span>    <span class="c1"># Assumes the values can actually be compared.
</span>    <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">]</span>
    <span class="n">values</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">values</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>  </div>
  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">middle</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
    <span class="s">'''Return the middle value of three.
    Assumes the values can actually be compared.'''</span>
    <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">]</span>
    <span class="n">values</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">values</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="clean-up-this-code">Clean Up This Code</h2>

  <ol>
    <li>Read this short program and try to predict what it does.</li>
    <li>Run it: how accurate was your prediction?</li>
    <li>Refactor the program to make it more readable.
Remember to run it after each change to ensure its behavior hasn‚Äôt changed.</li>
    <li>Compare your rewrite with your neighbor‚Äôs.
What did you do the same?
What did you do differently, and why?</li>
  </ol>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">s</span> <span class="o">=</span> <span class="s">'et cetera'</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
    <span class="c1"># print('at', j)
</span>    <span class="n">new</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span>
        <span class="n">right</span> <span class="o">=</span> <span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">left</span><span class="p">]</span><span class="o">==</span><span class="n">s</span><span class="p">[</span><span class="n">right</span><span class="p">]:</span> <span class="n">new</span> <span class="o">+=</span> <span class="s">'-'</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">new</span> <span class="o">+=</span> <span class="s">'*'</span>
    <span class="n">s</span><span class="o">=</span><span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">new</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div>  </div>

  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>

    <p>Here‚Äôs one solution.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">string_machine</span><span class="p">(</span><span class="n">input_string</span><span class="p">,</span> <span class="n">iterations</span><span class="p">):</span>
    <span class="s">"""
    Takes input_string and generates a new string with -'s and *'s
    corresponding to characters that have identical adjacent characters
    or not, respectively.  Iterates through this procedure with the resultant
    strings for the supplied number of iterations.
    """</span>
    <span class="k">print</span><span class="p">(</span><span class="n">input_string</span><span class="p">)</span>
    <span class="n">input_string_length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">input_string</span><span class="p">)</span>
    <span class="n">old</span> <span class="o">=</span> <span class="n">input_string</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
        <span class="n">new</span> <span class="o">=</span> <span class="s">''</span>
        <span class="c1"># iterate through characters in previous string
</span>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">input_string_length</span><span class="p">):</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span>
            <span class="n">right</span> <span class="o">=</span> <span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">input_string_length</span>  <span class="c1"># ensure right index wraps around
</span>            <span class="k">if</span> <span class="n">old</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">==</span> <span class="n">old</span><span class="p">[</span><span class="n">right</span><span class="p">]:</span>
                <span class="n">new</span> <span class="o">+=</span> <span class="s">'-'</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">new</span> <span class="o">+=</span> <span class="s">'*'</span>
        <span class="k">print</span><span class="p">(</span><span class="n">new</span><span class="p">)</span>
        <span class="c1"># store new string as old
</span>        <span class="n">old</span> <span class="o">=</span> <span class="n">new</span>     

<span class="n">string_machine</span><span class="p">(</span><span class="s">'et cetera'</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</code></pre></div>    </div>

    <div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">et cetera
</span><span class="err">*****-***</span>
----*-*--
<span class="gd">---*---*-
--*-*-*-*
</span><span class="err">**-------</span>
***-----*
<span class="gd">--**---**
</span><span class="err">*****-***</span>
----*-*--
<span class="gd">---*---*-
</span></code></pre></div>    </div>
  </blockquote>
</blockquote>
:ET
#!/usr/bin/env python

'''Generate schedule for course looking at lesson:, exercises:, and reflection: keys.'''


import sys
import re
import argparse


DIV = re.compile(r'^---\s*$')
TIMING = re.compile(r'^(teaching|exercises|reflection):\s+(\d+)\s*')
FORMAT = '{{0:{0}}} : {{1:02d}}:{{2:02d}}'
FINISHED = 'finished'


def main():
    '''Main driver.'''

    params = parse_args()

    if not params.filenames:
        format = FORMAT.format(len(FINISHED))
        total = process(sys.stdin)

    else:
        format = FORMAT.format(max([len(x) for x in params.filenames]))
        total = params.start
        for f in params.filenames:
            show(format, f, total)
            with open(f, 'r') as reader:
                total += process(reader)

    show(format, FINISHED, total)


def parse_args():
    '''Parse command-line arguments.'''

    parser = argparse.ArgumentParser()
    parser.add_argument('-t', dest='start',
                        help='start time (as hh:mm)')
    parser.add_argument('filenames', nargs='*')

    params = parser.parse_args()

    if params.start is None:
        params.start = 0
    else:
        hours, minutes = [int(x) for x in params.start.split(':')]
        params.start = hours * 60 + minutes

    return params


def process(reader):
    '''Process file contents.'''

    divs = 0
    total = 0

    for line in reader:

        # Stop after end of header
        if DIV.search(line):
            divs += 1
            if divs == 2:
                break

        # Add up timings.
        m = TIMING.search(line)
        if m:
            total += int(m.group(2))

    return total


def show(format, name, time):
    '''Display start time.'''

    print(format.format(name, time // 60, time % 60))


if __name__ == '__main__':
    main()
